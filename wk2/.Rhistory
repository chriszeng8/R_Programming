rmatrix
rmatrx
m<-1:10
n<-101:110
cmatrx<-cbind(m,n) #create matrix by binding columns
cmatrx
rmatrx<-rbind(m,n)
rmatrx
rmatrx
cmatrx
is.nan(x)
is.na(x)
x<-c(1,2,NaN,NA,4)
is.na(x)
is.nan(x)
source(Na_Nan)
source("Na_Nan")
source("Na_Nan.r")
x
is.na(x)
?na
?is.na
x<-c(1,2,NaN,NA,4)
is.na(x)
is.nan(x)
a<-0/0
a
TFv=(T,F,F,T,T)
TFv<-c(T,F,F,T,T)
TFv
a<-(1,2,4,6,7)
a<-c(1,2,4,6,7)
a(TFv)
a[TFv]
a<-1:5
a
source('~/Github_Repo/R_Programming/wk2/Subsetting_True_False.r')
## This is to demostrate to subset a vector using a logical vector.
##Create a vector with
TFv<-c(T,F,F,T,T)
TFv
c<-1:5
a[TFv] ## [ using single bracket to subset the elements corresponding to True
TFv<-c(T,F,F,T,T)
TFv
c<-1:5
a[TFv] ## [ using single bracket to subset the elements corresponding to True
a[TFv] ## [ using single bracket to subset the elements corresponding to True
## This is to demostrate to subset a vector using a logical vector.
##Create a vector with
TFv<-c(T,F,F,T,T)
TFv
c<-1:5
a[TFv] ## [ using single bracket to subset the elements corresponding to True
TFv<-c(T,F,T,T,T)
TFv
c<-1:5
a[TFv] ## [ using single bracket to subset the elements corresponding to True
clear
clean
rm
a<-1:5
a
b
b<-1
rm(list = WS)
rm(list=ls())
LetterVector=c("a","b","c","d","d","b")
LetterVector=c("a","b","c","d","d","b")
LetterVector[LetterVector>"a"]
LetterVector[LetterVector>"a"]
LetterVector=c("a","b","c","d","d","b")
LetterVector>"a"
LetterVector=c("a","b","c","d","d","b")
LetterVector>"b" # Return a logical vector
LetterVector[LetterVector>"b"] # Return subset of data that is greater than "a" in alphebatical order
TFv
a<-1:5
a[TFv] ## [ using single bracket to subset the elements corresponding to True (which are the 1st, 3rd and 5th elements)
## Another example which demonstrate how to use this logical vector implicitly
LetterVector=c("a","b","c","d","d","b")
LetterVector>"b" # Return a logical vector
LetterVector[LetterVector>"b"] # Return subset of data that is greater than "b" in alphebatical order
x<-matrix(1:6,2,3)
x
x[1,2:3]
x[1:2,2:3]
b<-x[1:2,2:3]
b
dim(b)
b<-x[1:2,2]
b
b<-x[1:2,2,drop=F]
b
b<-[,2,drop=F]
b<-x[,2,drop=F]
b
x<-matrix(1:6,2,3)
x
## The matrix x should look like this:
##      [,1] [,2] [,3]
## [1,]    1    3    5
## [2,]    2    4    6
## Extracting/Subsetting the 2nd column will return a vector
col_a<-x[,2]
col_a
## Extracting/Subsetting the 2nd column with DROP turned off, will retain the original structure
col_b<-x[,2,drop=False]
## in subsetting a matrix
## Extracting/Subsetting the 2nd column with DROP turned off, will retain the original structure
col_b<-x[,2,drop=F]
col_b
## will be automatically turned off (i.e., the original matrix format will be retained)
sub_mat=x[,2:3]
sub_mat
dim(sub_mat)
x<-list(foo=1:5,bar=0.6)
len(x)
length(x)
dim(x)
b=("a","b","c","d")
b<-["a","b","c","d"]
b=["a","b","c","d"]
CC=["a","b","c","d"]
CC=c["a","b","c","d"]
CC<-c("a","b","c","d")
CC
length(CC)
CC
x
x<-list(foo=1:5,bar=0.6)
x<-list(foo=1:5,bar=0.6)
x<-list(foo=1:5,bar=0.6)
x<-list(foo=1:5,bar=0.6)
# What would x look like when we print it out?
x
# What is the length or how many elements are there in list x?
length(x)
x[[1]]
#Subsetting using $ or [""]
x$foo
x<-list(foo=1:5,bar=0.6)
# What would x look like when we print it out?
x
# What is the length or how many elements are there in list x?
length(x)
# Subsetting using [ or [[
x[1]    #subsetting list using [
x[[1]]  #subsetting list using [[
#Subsetting using $ or [""]
x$foo   #subsetting list using $
x$bar
x["foo"]#subsetting list using [""]
x<-list(a=list(10,12,14),b=c(3.14,2.81))
x[[c(1,3)]]
x<-list(a=c(10,12,14),b=c(3.14,2.81))
x[[c(1,3)]]
x<-list(a=list(10,12,14),b=c(3.14,2.81))
y<-list(a=list(10,12,14),b=list(3.14,2.81))
y[[c(1,3)]]
y[[c(2,3)]]
y<-list(a=list(10,12,14),b=list(3.14,2.81))
y[[c(2,2)]]
y<-list(a=list(c=list(10,11,13),12,14),b=list(3.14,2.81))
y[[c(1,1,2)]]
y[[c(1,1)]]
z<-list(a=list(c=list(10,11,13),12,14),b=list(3.14,2.81))
z[[c(1,1,3)]]
## Here we subset the first element of the list (i.e., a), then subset the first element with
## the list a (i.e. list c), finally extracting the 3rd element from the list c.
z[[c(1,1)]]
x<-c(1,2,NA,4,NA,5)
bad<-is.na(x)
bad
!bad
x[!bad]
